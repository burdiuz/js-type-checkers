{"version":3,"file":"type-checkers.min.js","sources":["../source/checkers/utils.js","../source/target/info.js","../source/checkers/primitive.js","../source/checkers/index.js","../source/reporters/utils.js","../source/reporters/console.js","../source/reporters/index.js","../source/enabled.js","../source/proxy/config.js","../source/target/proxy.js","../source/utils.js","../source/proxy/create.js","../source/proxy/getProperty.js","../source/proxy/setProperty.js","../source/proxy/callFunction.js","../source/proxy/createDeep.js","../source/reporters/error.js","../source/target/objectMerge.js"],"sourcesContent":["\nexport const GET_PROPERTY = '(GetProperty)';\nexport const SET_PROPERTY = '(SetProperty)';\nexport const INDEX = '(Index)';\nexport const ARGUMENTS = '(Arguments)';\nexport const RETURN_VALUE = '(ReturnValue)';\nexport const MERGE = '(Merge)';\n\nexport function AsIs(value) {\n  if (this instanceof AsIs) {\n    this.value = value;\n  } else {\n    return new AsIs(value);\n  }\n}\n\nfunction asIs() {\n  return this.value;\n}\n\nAsIs.prototype.toString = asIs;\nAsIs.prototype.valueOf = asIs;\nAsIs.prototype[Symbol.toPrimitive] = asIs;\n\nexport const buildPath = (sequence) => sequence\n  .reduce((str, name) => {\n    if (name instanceof AsIs) {\n      str = `${str}${name}`;\n    } else if (String(parseInt(name, 10)) === name) {\n      str = `${str}[${name}]`;\n    } else if (/^[a-z][\\w$]*$/i.test(name)) {\n      str = str ? `${str}.${name}` : name;\n    } else {\n      str = `${str}[\"${name}\"]`;\n    }\n\n    return str;\n  }, '');\n","export const INFO_KEY = Symbol('type-checkers::info');\n\nexport const createTargetInfo = (\n  checker,\n  config,\n  deep = true,\n  names = [],\n  children = createChildrenCache(),\n) => ({\n  checker,\n  config,\n  deep,\n  names,\n  children,\n});\n\nexport const getTargetInfo = (target) => (target ? target[INFO_KEY] : undefined);\n\nexport const setTargetInfo = (target, info) => {\n  if (target && info) {\n    target[INFO_KEY] = info;\n  }\n};\n\nexport const hasTargetInfo = (target) => !!getTargetInfo(target);\n\nexport const getTargetTypeChecker = (target) =>\n  (target && target[INFO_KEY] ? target[INFO_KEY].checker : undefined);\n\nexport const getTargetTypeCheckerConfig = (target) =>\n  (target && target[INFO_KEY] ? target[INFO_KEY].config : undefined);\n\nexport const createChildrenCache = (children = {}) => ({ ...children });\n\nexport const mergeChildrenCache = (targetCache, sourceCache) => {\n  for (const name in sourceCache) {\n    if (targetCache.hasOwnProperty(name)) {\n      targetCache[name] = mergeTargetInfo(targetCache[name], sourceCache[name]);\n    } else {\n      targetCache[name] = sourceCache[name];\n    }\n  }\n\n  return targetCache;\n};\n\nexport const storeChildInfo = (cache, name, childInfo) => {\n  delete cache[name];\n\n  if (childInfo) {\n    cache[name] = childInfo;\n  }\n};\n\nexport const storeChildInfoFrom = (cache, name, child) => {\n  storeChildInfo(cache, name, getTargetInfo(child));\n};\n\nexport const getChildInfo = (cache, name) => cache[name];\n\nexport const hasChildInfo = (cache, name) => !!cache[name];\n\nexport const removeChildInfo = (cache, name) => delete cache[name];\n\nexport const mergeTargetInfo = (targetInfo, sourceInfo) => {\n  const { deep, checker, children, config, names } = targetInfo;\n\n  if (checker === sourceInfo.checker) {\n    targetInfo.deep = deep || sourceInfo.deep;\n    targetInfo.children = mergeChildrenCache(children, sourceInfo.children);\n    targetInfo.config = checker.mergeConfigs(config, sourceInfo.config, names);\n  } else {\n    console.error('TypeChecked objects can be merged only if using exactly same instance of type checker.');\n  }\n\n  return targetInfo;\n};\n","import {\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  INDEX,\n  MERGE,\n  buildPath,\n  AsIs,\n} from './utils';\n\nimport { getTargetTypeCheckerConfig } from '../target/info';\n\nconst checkPrimitiveType = (action, types, name, type, errorReporter, sequence) => {\n  if (!type) {\n    return true;\n  }\n\n  const storedType = types[name];\n\n  if (storedType) {\n    if (storedType !== type) {\n      errorReporter(action, buildPath([...sequence, name]), storedType, type);\n\n      return false;\n    }\n  } else {\n    types[name] = type;\n  }\n\n  return true;\n};\n\nconst indexBasedClasses = [Array];\n\nexport const isIndexAccessTarget = (target) =>\n  (target && indexBasedClasses.indexOf(target.constructor) >= 0);\n\nexport const getTypeString = (value) => {\n  if (value === undefined) {\n    return '';\n  } else if (value instanceof Array) {\n    return 'array';\n  }\n\n  return typeof value;\n};\n\nexport const mergeConfigs = ({ types, errorReporter }, source, names = []) => {\n  const sourceTypes = source.types;\n\n  for (const name in sourceTypes) {\n    if (sourceTypes.hasOwnProperty(name)) {\n      const sourceType = sourceTypes[name];\n      const targetType = types[name];\n\n      if (sourceType && targetType && targetType !== sourceType) {\n        errorReporter(MERGE, buildPath([...names, name]), targetType, sourceType);\n      } else {\n        types[name] = sourceType;\n      }\n    }\n  }\n};\n\nexport const replacePropertyTypeCheck = (target, name, typeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[name];\n\n  if (typeCheckFn) {\n    types[name] = typeCheckFn;\n  }\n};\n\nexport const replaceArgumentsTypeCheck = (target, name, argumentsTypeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[ARGUMENTS];\n\n  if (argumentsTypeCheckFn) {\n    types[name] = argumentsTypeCheckFn;\n  }\n};\n\nexport const replaceReturnValueTypeCheck = (target, name, returnValueTypeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[RETURN_VALUE];\n\n  if (returnValueTypeCheckFn) {\n    types[RETURN_VALUE] = returnValueTypeCheckFn;\n  }\n};\n\nexport const registerIndexBasedClass = (constructor) => {\n  indexBasedClasses.push(constructor);\n};\n\nexport const setIndexValueType = (target, type) => {\n  const config = getTargetTypeCheckerConfig(target);\n  if (config) {\n    config.types[INDEX] = type;\n  }\n};\n\nexport const setIndexValueTypeBy = (target, value) => {\n  setIndexValueType(target, getTypeString(value));\n};\n\nexport const replaceIndexedTypeCheck = (target, typeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[INDEX];\n\n  if (typeCheckFn) {\n    types[INDEX] = typeCheckFn;\n  }\n};\n\nconst PrimitiveTypeChecker = {\n  collectTypesOnInit: true,\n  areArrayElementsOfSameType: true,\n\n  init(target, errorReporter, cachedTypes = null) {\n    let types = {};\n\n    if (cachedTypes) {\n      types = cachedTypes;\n    } else if (this.collectTypesOnInit) {\n      Object.keys(target)\n        .forEach((key) => {\n          types[key] = getTypeString(target[key]);\n        });\n    }\n\n    return {\n      types,\n      errorReporter,\n    };\n  },\n\n  getProperty(target, name, value, config, sequence) {\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\n      return this.getIndexProperty(target, name, value, config, sequence);\n    }\n\n    return this.getNamedProperty(target, name, value, config, sequence);\n  },\n\n  getIndexProperty(target, name, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(GET_PROPERTY, target, name, value, config, sequence);\n    }\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(GET_PROPERTY, types, AsIs(INDEX), type, errorReporter, sequence);\n  },\n\n  getNamedProperty(target, name, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(GET_PROPERTY, target, name, value, config, sequence);\n    }\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(GET_PROPERTY, types, name, type, errorReporter, sequence);\n  },\n\n  setProperty(target, name, newValue, config, sequence) {\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\n      return this.setIndexProperty(target, name, newValue, config, sequence);\n    }\n\n    return this.setNamedProperty(target, name, newValue, config, sequence);\n  },\n\n  setIndexProperty(target, name, newValue, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(SET_PROPERTY, target, name, newValue, config, sequence);\n    }\n\n    const type = getTypeString(newValue);\n\n    return checkPrimitiveType(SET_PROPERTY, types, AsIs(INDEX), type, errorReporter, sequence);\n  },\n\n  setNamedProperty(target, name, newValue, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(SET_PROPERTY, target, name, newValue, config, sequence);\n    }\n\n    const type = getTypeString(newValue);\n\n    return checkPrimitiveType(SET_PROPERTY, types, name, type, errorReporter, sequence);\n  },\n\n  arguments(target, thisArg, args, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[ARGUMENTS];\n\n    if (typeFn instanceof Function) {\n      return typeFn(ARGUMENTS, target, args, config, sequence);\n    }\n\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = getTypeString(args[index]);\n      const agrValid = checkPrimitiveType(ARGUMENTS, types, String(index), type, errorReporter, sequence);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  },\n\n  returnValue(target, thisArg, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[RETURN_VALUE];\n\n    if (typeFn instanceof Function) {\n      return typeFn(ARGUMENTS, target, value, config, sequence);\n    }\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(RETURN_VALUE, types, AsIs(RETURN_VALUE), type, errorReporter, sequence);\n  },\n\n  isIndexAccessTarget,\n  getTypeString,\n  mergeConfigs,\n  replacePropertyTypeCheck,\n  replaceArgumentsTypeCheck,\n  replaceReturnValueTypeCheck,\n  registerIndexBasedClass,\n  setIndexValueType,\n  setIndexValueTypeBy,\n  replaceIndexedTypeCheck,\n};\n\nexport default PrimitiveTypeChecker;\n","import PrimitiveTypeChecker from './primitive';\n\nlet defaultTypeChecker = PrimitiveTypeChecker;\n\nexport const getDefaultTypeChecker = () => defaultTypeChecker;\nexport const setDefaultTypeChecker = (typeChecker) => {\n  defaultTypeChecker = typeChecker;\n};\n","export const constructErrorString = (action, name, required, actual) =>\n  `${action}Error on \"${name}\" instead of \"${required}\" received \"${actual}\"`;\n","import { constructErrorString } from './utils';\n\nexport const ConsoleErrorReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\nexport const ConsoleWarnReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.warn(constructErrorString(action, name, requiredTypeString, actualTypeString));\n","import { ConsoleErrorReporter } from './console';\n\nlet errorReporter = ConsoleErrorReporter;\n\nexport const getErrorReporter = () => errorReporter;\n\nexport const setErrorReporter = (reporter) => errorReporter = reporter;\n","let enabled = true;\n\nexport const isEnabled = () => enabled;\nexport const setEnabled = (value = true) => enabled = !!value;\n","export const config = {\n  wrapFunctionReturnValues: true,\n  wrapFunctionArguments: false,\n  wrapSetPropertyValues: true,\n};\n\nexport const setProxyConfig = (newConfig) => Object.assign(config, newConfig);\n\nexport const getProxyConfig = () => ({ ...config });\n","export const TARGET_KEY = Symbol('type-checkers::target');\n\nexport const getOriginalTarget = (target) => {\n  return target[TARGET_KEY] || target;\n};\n","import { TARGET_KEY } from './target/proxy';\n\nconst validTypes = {\n  object: true,\n  function: true,\n};\n\nexport const isValidTarget = (target) => target && validTypes[typeof target];\nexport const isTypeChecked = (target) => Boolean(target && target[TARGET_KEY]);","import { getDefaultTypeChecker } from '../checkers';\nimport { getErrorReporter } from '../reporters';\nimport { isEnabled } from '../enabled';\nimport {\n  createTargetInfo,\n  setTargetInfo,\n  createChildrenCache,\n} from '../target/info';\nimport { isValidTarget, isTypeChecked } from '../utils';\nimport getPropertyInit from './getProperty';\nimport setPropertyInit from './setProperty';\nimport callFunctionInit from './callFunction';\n\nlet getProperty;\nlet setProperty;\nlet callFunction;\n\nconst objectProxy = (target) => new Proxy(\n  target,\n  {\n    get: getProperty,\n    set: setProperty,\n  },\n);\n\nconst functionProxy = (target) => new Proxy(\n  target,\n  {\n    apply: callFunction,\n    construct: callFunction,\n  },\n);\n\nexport const wrapWithProxy = (target) => {\n  if (target instanceof Function) {\n    return functionProxy(target);\n  }\n\n  return objectProxy(target);\n};\n\nexport const createInfoFromOptions = (target, {\n  deep = true,\n  names = [],\n  config = null,\n  children = null,\n  checker = getDefaultTypeChecker(),\n  info = null, // exclusive option, if set other options being ignored\n} = {}) => info || createTargetInfo(\n  checker,\n  checker.init(target, getErrorReporter(), config),\n  deep,\n  names,\n  createChildrenCache(children),\n);\n\nconst create = (target, options) => {\n  if (!isValidTarget(target) || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  setTargetInfo(\n    target,\n    createInfoFromOptions(target, options),\n  );\n\n  return wrapWithProxy(target);\n};\n\ngetProperty = getPropertyInit(create);\nsetProperty = setPropertyInit(create);\ncallFunction = callFunctionInit(create);\n\nexport default create;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst getTargetProperty = (createFn, target, property, value) => {\n  const info = getTargetInfo(target);\n  const { deep, children, names, checker } = info;\n\n  if (deep || value instanceof Function) {\n    const childInfo = getChildInfo(children, property);\n\n    if (childInfo) {\n      value = createFn(value, { info: childInfo });\n    } else {\n      value = createFn(value, { deep, names: [...names, property], checker });\n      storeChildInfoFrom(children, property, value);\n    }\n  }\n\n  return value;\n};\n\nconst getProperty = (createFn) => (target, property) => {\n  const value = target[property];\n\n  if (property === INFO_KEY) {\n    return value;\n    /*\n    target[TARGET_KEY] is a virtual property accessing which indicates\n    if object is wrapped with type checked proxy or not.\n    */\n  } else if (property === TARGET_KEY) {\n    return target;\n  }\n\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.getProperty) {\n    checker.getProperty(target, property, value, config, names);\n  }\n\n  if (!isValidTarget(value) || isTypeChecked(value)) {\n    return value;\n  }\n\n  return getTargetProperty(createFn, target, property, value);\n};\n\nexport default getProperty;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n  mergeTargetInfo,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { config as proxyConfig } from './config';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst setNonTargetProperty = (target, property, value) => {\n  if (property === INFO_KEY) {\n    let info = getTargetInfo(target);\n    if (info && value && info !== value) {\n      info = mergeTargetInfo(info, value);\n    } else {\n      info = value;\n    }\n\n    target[property] = info;\n    return true;\n  } else if (!isValidTarget(value)) {\n    target[property] = value;\n    return true;\n  }\n\n  return false;\n};\n\nconst setTargetProperty = (createFn, target, property, value) => {\n  if (proxyConfig.wrapSetPropertyValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(value)) {\n      const childInfo = getChildInfo(children, property);\n\n      if (childInfo) {\n        value = createFn(value, { info: childInfo });\n      } else {\n        value = createFn(value, { deep, names: [...names, property], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, property, value);\n  }\n\n  target[property] = value;\n  return true;\n};\n\nconst setProperty = (createFn) => (target, property, value) => {\n  if (property === TARGET_KEY) {\n    throw new Error(`\"${TARGET_KEY}\" is a virtual property and cannot be set`);\n  }\n\n  const { names, config, checker } = getTargetInfo(target);\n\n  if (checker.setProperty) {\n    checker.setProperty(target, property, value, config, names);\n  }\n\n  return setNonTargetProperty(target, property, value)\n    || setTargetProperty(createFn, target, property, value);\n};\n\nexport default setProperty;\n","import {\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { config as proxyConfig } from './config';\nimport { isTypeChecked } from '../utils';\nimport { RETURN_VALUE } from '../checkers/utils';\n\nconst getTargetArguments = (createFn, target, argumentsList) => {\n  if (proxyConfig.wrapFunctionArguments) {\n    const { deep, names, checker } = getTargetInfo(target);\n    const { length } = argumentsList;\n    // FIXME cache arguments info objects as children\n    for (let index = 0; index < length; index++) {\n      argumentsList[index] = createFn(\n        argumentsList[index],\n        {\n          deep,\n          names: [...names, index],\n          checker,\n        },\n      );\n    }\n  }\n\n  return argumentsList;\n};\nconst getTargetReturnValue = (createFn, target, returnValue) => {\n  if (proxyConfig.wrapFunctionReturnValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(returnValue)) {\n      const childInfo = getChildInfo(children, RETURN_VALUE);\n\n      if (childInfo) {\n        returnValue = createFn(returnValue, { info: childInfo });\n      } else {\n        returnValue = createFn(returnValue, { deep, names: [...names], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, RETURN_VALUE, returnValue);\n  }\n\n  return returnValue;\n};\n\nconst callFunction = (createFn) => (target, thisArg, argumentsList) => {\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.arguments) {\n    checker.arguments(target, thisArg, argumentsList, config, names);\n  }\n\n  argumentsList = getTargetArguments(createFn, target, argumentsList);\n\n  const result = target.apply(thisArg, argumentsList);\n\n  if (checker.returnValue) {\n    checker.returnValue(target, thisArg, result, config, names);\n  }\n\n  return getTargetReturnValue(createFn, target, result);\n};\n\nexport default callFunction;\n","import { isEnabled } from '../enabled';\nimport {\n  setTargetInfo,\n  storeChildInfo,\n  getChildInfo,\n} from '../target/info';\nimport { isTypeChecked } from '../utils';\nimport { wrapWithProxy, createInfoFromOptions } from './create';\n\nconst deepInitializer = (target, options) => {\n  const info = createInfoFromOptions(target, options);\n  const { deep, names, checker, config, children } = info;\n\n  Object.keys(target)\n    .forEach((name) => {\n      const value = target[name];\n\n      checker.getProperty(target, name, value, config, names);\n\n      // skip functions/methods since we get info about them only when being executed\n      if (typeof value === 'object') {\n        let childInfo = getChildInfo(children, name);\n\n        if (childInfo) {\n          deepInitializer(value, { info: childInfo });\n        } else {\n          childInfo = deepInitializer(value, { deep, names: [...names, name], checker });\n          storeChildInfo(children, name, childInfo);\n        }\n      }\n    });\n\n  setTargetInfo(target, info);\n\n  return info;\n};\n\nconst createDeep = (target, options) => {\n  if (!target || typeof target !== 'object' || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  deepInitializer(target, options);\n\n  return wrapWithProxy(target);\n};\n\nexport default createDeep;\n","import { constructErrorString } from './utils';\n\nexport const ThrowErrorReporter = (action, name, requiredTypeString, actualTypeString) => {\n  throw new Error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n};\n","import {\n  getTargetInfo,\n  hasTargetInfo,\n} from './info';\n\nimport { create } from '../proxy';\n\nimport { isEnabled } from '../enabled';\n\nconst objectMerge = (options, ...sources) => {\n  let target = {};\n\n  if (isEnabled()) {\n    if (!options) {\n      options = {\n        info: getTargetInfo(sources.find((item) => hasTargetInfo(item))),\n        deep: false,\n      };\n    }\n\n    target = create(target, options);\n  }\n\n  return Object.assign(target, ...sources);\n};\n\nexport default objectMerge;\n"],"names":["GET_PROPERTY","SET_PROPERTY","INDEX","ARGUMENTS","RETURN_VALUE","AsIs","value","this","asIs","prototype","toString","valueOf","Symbol","toPrimitive","buildPath","sequence","reduce","str","name","String","parseInt","test","getTargetInfo","target","INFO_KEY","undefined","setTargetInfo","info","hasTargetInfo","getTargetTypeCheckerConfig","config","createChildrenCache","children","storeChildInfo","cache","childInfo","storeChildInfoFrom","child","getChildInfo","mergeTargetInfo","targetInfo","sourceInfo","deep","checker","names","targetCache","sourceCache","hasOwnProperty","mergeChildrenCache","mergeConfigs","error","checkPrimitiveType","action","types","type","errorReporter","storedType","indexBasedClasses","Array","isIndexAccessTarget","indexOf","constructor","getTypeString","setIndexValueType","PrimitiveTypeChecker","cachedTypes","collectTypesOnInit","keys","forEach","key","areArrayElementsOfSameType","getIndexProperty","getNamedProperty","typeFn","Function","newValue","setIndexProperty","setNamedProperty","thisArg","args","length","valid","index","source","sourceTypes","sourceType","targetType","typeCheckFn","argumentsTypeCheckFn","returnValueTypeCheckFn","push","defaultTypeChecker","getDefaultTypeChecker","constructErrorString","required","actual","actualTypeString","ConsoleErrorReporter","getErrorReporter","enabled","isEnabled","TARGET_KEY","validTypes","isValidTarget","isTypeChecked","Boolean","getProperty","setProperty","callFunction","wrapWithProxy","Proxy","createInfoFromOptions","createTargetInfo","init","create","options","createFn","property","getTargetProperty","Error","setNonTargetProperty","proxyConfig","wrapSetPropertyValues","setTargetProperty","argumentsList","arguments","wrapFunctionArguments","getTargetArguments","result","apply","returnValue","wrapFunctionReturnValues","getTargetReturnValue","deepInitializer","typeChecker","requiredTypeString","console","warn","reporter","sources","find","item","Object","assign","newConfig"],"mappings":"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"}