{"version":3,"file":"type-checkers.min.js","sources":["../source/checkers/utils.js","../source/checkers/primitive.js","../source/checkers/index.js","../source/reporters/utils.js","../source/reporters/console.js","../source/reporters/index.js","../source/enabled.js","../source/target/info.js","../source/proxy/config.js","../source/target/proxy.js","../source/utils.js","../source/proxy/create.js","../source/proxy/getProperty.js","../source/proxy/setProperty.js","../source/proxy/callFunction.js","../source/proxy/createDeep.js","../source/reporters/error.js","../source/target/objectMerge.js"],"sourcesContent":["\nexport const GET_PROPERTY = 'GetProperty';\nexport const SET_PROPERTY = 'SetProperty';\nexport const ARGUMENTS = 'Arguments';\nexport const RETURN_VALUE = 'ReturnValue';\nexport const MERGE = 'Merge';\n\nexport const buildPath = sequence => sequence\n  .reduce((str, name) => {\n    if (String(parseInt(name, 10)) === name) {\n      str = `${str}[${name}]`;\n    } else if (/^[a-z][\\w$]*$/i.test(name)) {\n      str = str ? `${str}.${name}` : name;\n    } else {\n      str = `${str}[\"${name}\"]`;\n    }\n\n    return str;\n  }, '');\n","import {\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  MERGE,\n  buildPath,\n} from './utils';\n\nconst checkType = (action, types, name, type, errorReporter, sequence) => {\n  if (!type) {\n    return true;\n  }\n\n  const storedType = types[name];\n\n  if (storedType) {\n    // TODO add possibility to store function in types[name] that can be called to identify if there are type error\n    if (storedType !== type) {\n      errorReporter(action, buildPath([...sequence, name]), types[name], type);\n\n      return false;\n    }\n  } else {\n    types[name] = type;\n  }\n\n  return true;\n};\n\nconst PrimitiveTypeChecker = {\n  collectTypesOnInit: true,\n\n  init(target, errorReporter, cachedTypes = null) {\n    let types = {};\n\n    if (cachedTypes) {\n      types = cachedTypes;\n    } else if (this.collectTypesOnInit) {\n      Object.keys(target)\n        .forEach((key) => {\n          types[key] = this.getTypeString(target[key]);\n        });\n    }\n\n    return {\n      types,\n      errorReporter,\n    };\n  },\n\n  getTypeString(value) {\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return 'array';\n    }\n\n    return typeof value;\n  },\n\n  mergeConfigs({ types, errorReporter }, source, names = []) {\n    const sourceTypes = source.types;\n\n    for (const name in sourceTypes) {\n      if (sourceTypes.hasOwnProperty(name)) {\n        const sourceType = sourceTypes[name];\n        const targetType = types[name];\n\n        if (sourceType && targetType && targetType !== sourceType) {\n          errorReporter(MERGE, buildPath([...names, name]), targetType, sourceType);\n        } else {\n          types[name] = sourceType;\n        }\n      }\n    }\n  },\n\n  getProperty(target, name, value, { types, errorReporter }, sequence) {\n    return checkType(\n      GET_PROPERTY,\n      types,\n      name,\n      this.getTypeString(value),\n      errorReporter,\n      sequence,\n    );\n  },\n\n  setProperty(target, name, newValue, { types, errorReporter }, sequence) {\n    return checkType(\n      SET_PROPERTY,\n      types,\n      name,\n      this.getTypeString(newValue),\n      errorReporter,\n      sequence,\n    );\n  },\n\n  arguments(target, thisArg, args, { types, errorReporter }, sequence) {\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const agrValid = checkType(\n        ARGUMENTS,\n        types,\n        String(index),\n        this.getTypeString(args[index]),\n        errorReporter,\n        sequence,\n      );\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  },\n\n  returnValue(target, thisArg, value, { types, errorReporter }, sequence) {\n    return checkType(\n      RETURN_VALUE,\n      types,\n      '',\n      this.getTypeString(value),\n      errorReporter,\n      sequence,\n    );\n  },\n};\n\nexport default PrimitiveTypeChecker;\n","import PrimitiveTypeChecker from './primitive';\n\nlet defaultTypeChecker = PrimitiveTypeChecker;\n\nexport const getDefaultTypeChecker = () => defaultTypeChecker;\nexport const setDefaultTypeChecker = (typeChecker) => defaultTypeChecker = typeChecker;\n","export const constructErrorString = (action, name, required, actual) =>\n  `${action}Error on \"${name}\" instead of \"${required}\" received \"${actual}\"`;\n","import { constructErrorString } from './utils';\n\nexport const ConsoleErrorReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\nexport const ConsoleWarnReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.warn(constructErrorString(action, name, requiredTypeString, actualTypeString));\n","import { ConsoleErrorReporter } from './console';\n\nlet errorReporter = ConsoleErrorReporter;\n\nexport const getErrorReporter = () => errorReporter;\n\nexport const setErrorReporter = (reporter) => errorReporter = reporter;\n","let enabled = true;\n\nexport const isEnabled = () => enabled;\nexport const setEnabled = (value = true) => enabled = !!value;\n","export const INFO_KEY = Symbol('type-checkers::info');\n\nexport const createTargetInfo = (checker, config, deep = true, names = [], children = createChildrenCache()) => ({\n  checker,\n  config,\n  deep,\n  names,\n  children,\n});\n\nexport const getTargetInfo = (target) => {\n  return target ? target[INFO_KEY] : undefined;\n};\n\nexport const setTargetInfo = (target, info) => {\n  if (target && info) {\n    target[INFO_KEY] = info;\n  }\n};\n\nexport const hasTargetInfo = (target) => !!getTargetInfo(target);\n\nexport const getTargetTypeChecker = (target) => {\n  return target && target[INFO_KEY] ? target[INFO_KEY].checker : undefined;\n};\n\nexport const getTargetTypeCheckerConfig = (target) => {\n  return target && target[INFO_KEY] ? target[INFO_KEY].config : undefined;\n};\n\nexport const createChildrenCache = (children = {}) => ({ ...children });\n\nexport const mergeChildrenCache = (targetCache, sourceCache) => {\n  for (const name in sourceCache) {\n    if (targetCache.hasOwnProperty(name)) {\n      targetCache[name] = mergeTargetInfo(targetCache[name], sourceCache[name]);\n    } else {\n      targetCache[name] = sourceCache[name];\n    }\n  }\n\n  return targetCache;\n};\n\nexport const storeChildInfo = (cache, name, childInfo) => {\n  delete cache[name];\n\n  if (childInfo) {\n    cache[name] = childInfo;\n  }\n};\n\nexport const storeChildInfoFrom = (cache, name, child) => {\n  storeChildInfo(cache, name, getTargetInfo(child));\n};\n\nexport const getChildInfo = (cache, name) => cache[name];\n\nexport const hasChildInfo = (cache, name) => !!cache[name];\n\nexport const removeChildInfo = (cache, name) => delete cache[name];\n\nexport const mergeTargetInfo = (targetInfo, sourceInfo) => {\n  const { deep, checker, children, config, names } = targetInfo;\n\n  if (checker === sourceInfo.checker) {\n    targetInfo.deep = deep || sourceInfo.deep;\n    targetInfo.children = mergeChildrenCache(children, sourceInfo.children);\n    targetInfo.config = checker.mergeConfigs(config, sourceInfo.config, names);\n  } else {\n    console.error('TypeChecked objects can be merged only if using exactly same instance of type checker.');\n  }\n\n  return targetInfo;\n};\n","export const config = {\n  wrapFunctionReturnValues: true,\n  wrapFunctionArguments: false,\n  wrapSetPropertyValues: true,\n};\n\nexport const setProxyConfig = (newConfig) => Object.assign(config, newConfig);\n\nexport const getProxyConfig = () => ({ ...config });\n","export const TARGET_KEY = Symbol('type-checkers::target');\n\nexport const getOriginalTarget = (target) => {\n  return target[TARGET_KEY] || target;\n};","import { TARGET_KEY } from './target/proxy';\n\nconst validTypes = {\n  object: true,\n  function: true,\n};\n\nexport const isValidTarget = (target) => target && validTypes[typeof target];\nexport const isTypeChecked = (target) => Boolean(target && target[TARGET_KEY]);","import { getDefaultTypeChecker } from '../checkers';\nimport { getErrorReporter } from '../reporters';\nimport { isEnabled } from '../enabled';\nimport {\n  createTargetInfo,\n  setTargetInfo,\n  createChildrenCache,\n} from '../target/info';\nimport { isValidTarget, isTypeChecked } from '../utils';\nimport getPropertyInit from './getProperty';\nimport setPropertyInit from './setProperty';\nimport callFunctionInit from './callFunction';\n\nlet getProperty;\nlet setProperty;\nlet callFunction;\n\nconst objectProxy = (target) => new Proxy(\n  target,\n  {\n    get: getProperty,\n    set: setProperty,\n  },\n);\n\nconst functionProxy = (target) => new Proxy(\n  target,\n  {\n    apply: callFunction,\n    construct: callFunction,\n  },\n);\n\nexport const wrapWithProxy = (target) => {\n  if (target instanceof Function) {\n    return functionProxy(target);\n  }\n\n  return objectProxy(target);\n};\n\nexport const createInfoFromOptions = (target, {\n  deep = true,\n  names = [],\n  config = null,\n  children = null,\n  checker = getDefaultTypeChecker(),\n  info = null, // exclusive option, if set other options being ignored\n} = {}) => info || createTargetInfo(\n  checker,\n  checker.init(target, getErrorReporter(), config),\n  deep,\n  names,\n  createChildrenCache(children),\n);\n\nconst create = (target, options) => {\n  if (!isValidTarget(target) || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  setTargetInfo(\n    target,\n    createInfoFromOptions(target, options),\n  );\n\n  return wrapWithProxy(target);\n};\n\ngetProperty = getPropertyInit(create);\nsetProperty = setPropertyInit(create);\ncallFunction = callFunctionInit(create);\n\nexport default create;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst getTargetProperty = (createFn, target, property, value) => {\n  const info = getTargetInfo(target);\n  const { deep, children, names, checker } = info;\n\n  if (deep || value instanceof Function) {\n    const childInfo = getChildInfo(children, property);\n\n    if (childInfo) {\n      value = createFn(value, { info: childInfo });\n    } else {\n      value = createFn(value, { deep, names: [...names, property], checker });\n      storeChildInfoFrom(children, property, value);\n    }\n  }\n\n  return value;\n};\n\nconst getProperty = (createFn) => (target, property) => {\n  const value = target[property];\n\n  if (property === INFO_KEY) {\n    return value;\n    /*\n    target[TARGET_KEY] is a virtual property accessing which indicates\n    if object is wrapped with type checked proxy or not.\n    */\n  } else if (property === TARGET_KEY) {\n    return target;\n  }\n\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.getProperty) {\n    checker.getProperty(target, property, value, config, names);\n  }\n\n  if (!isValidTarget(value) || isTypeChecked(value)) {\n    return value;\n  }\n\n  return getTargetProperty(createFn, target, property, value);\n};\n\nexport default getProperty;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n  mergeTargetInfo,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { config as proxyConfig } from './config';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst setNonTargetProperty = (target, property, value) => {\n  if (property === INFO_KEY) {\n    let info = getTargetInfo(target);\n    if (info && value && info !== value) {\n      info = mergeTargetInfo(info, value);\n    } else {\n      info = value;\n    }\n\n    target[property] = info;\n    return true;\n  } else if (!isValidTarget(value)) {\n    target[property] = value;\n    return true;\n  }\n\n  return false;\n};\n\nconst setTargetProperty = (createFn, target, property, value) => {\n  if (proxyConfig.wrapSetPropertyValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(value)) {\n      const childInfo = getChildInfo(children, property);\n\n      if (childInfo) {\n        value = createFn(value, { info: childInfo });\n      } else {\n        value = createFn(value, { deep, names: [...names, property], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, property, value);\n  }\n\n  target[property] = value;\n  return true;\n};\n\nconst setProperty = (createFn) => (target, property, value) => {\n  if (property === TARGET_KEY) {\n    throw new Error(`\"${TARGET_KEY}\" is a virtual property and cannot be set`);\n  }\n\n  const { names, config, checker } = getTargetInfo(target);\n\n  if (checker.setProperty) {\n    checker.setProperty(target, property, value, config, names);\n  }\n\n  return setNonTargetProperty(target, property, value)\n    || setTargetProperty(createFn, target, property, value);\n};\n\nexport default setProperty;\n","import {\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { config as proxyConfig } from './config';\nimport { isTypeChecked } from '../utils';\nimport { RETURN_VALUE } from '../checkers/utils';\n\nconst getTargetArguments = (createFn, target, argumentsList) => {\n  if (proxyConfig.wrapFunctionArguments) {\n    const { deep, names, checker } = getTargetInfo(target);\n    const { length } = argumentsList;\n    // FIXME cache arguments info objects as children\n    for (let index = 0; index < length; index++) {\n      argumentsList[index] = createFn(\n        argumentsList[index],\n        {\n          deep,\n          names: [...names, index],\n          checker,\n        },\n      );\n    }\n  }\n\n  return argumentsList;\n};\nconst getTargetReturnValue = (createFn, target, returnValue) => {\n  if (proxyConfig.wrapFunctionReturnValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(returnValue)) {\n      const childInfo = getChildInfo(children, RETURN_VALUE);\n\n      if (childInfo) {\n        returnValue = createFn(returnValue, { info: childInfo });\n      } else {\n        returnValue = createFn(returnValue, { deep, names: [...names], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, RETURN_VALUE, returnValue);\n  }\n\n  return returnValue;\n};\n\nconst callFunction = (createFn) => (target, thisArg, argumentsList) => {\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.arguments) {\n    checker.arguments(target, thisArg, argumentsList, config, names);\n  }\n\n  argumentsList = getTargetArguments(createFn, target, argumentsList);\n\n  const result = target.apply(thisArg, argumentsList);\n\n  if (checker.returnValue) {\n    checker.returnValue(target, thisArg, result, config, names);\n  }\n\n  return getTargetReturnValue(createFn, target, result);\n};\n\nexport default callFunction;\n","import { isEnabled } from '../enabled';\nimport {\n  setTargetInfo,\n  storeChildInfo,\n  getChildInfo,\n} from '../target/info';\nimport { isTypeChecked } from '../utils';\nimport { wrapWithProxy, createInfoFromOptions } from './create';\n\nconst deepInitializer = (target, options) => {\n  const info = createInfoFromOptions(target, options);\n  const { deep, names, checker, config, children } = info;\n\n  Object.keys(target)\n    .forEach((name) => {\n      const value = target[name];\n\n      checker.getProperty(target, name, value, config, names);\n\n      // skip functions/methods since we get info about them only when being executed\n      if (typeof value === 'object') {\n        let childInfo = getChildInfo(children, name);\n\n        if (childInfo) {\n          deepInitializer(value, { info: childInfo });\n        } else {\n          childInfo = deepInitializer(value, { deep, names: [...names, name], checker });\n          storeChildInfo(children, name, childInfo);\n        }\n      }\n    });\n\n  setTargetInfo(target, info);\n\n  return info;\n};\n\nconst createDeep = (target, options) => {\n  if (!target || typeof target !== 'object' || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  deepInitializer(target, options);\n\n  return wrapWithProxy(target);\n};\n\nexport default createDeep;\n","import { constructErrorString } from './utils';\n\nexport const ThrowErrorReporter = (action, name, requiredTypeString, actualTypeString) => {\n  throw new Error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n};\n","import {\n  getTargetInfo,\n  hasTargetInfo,\n} from './info';\n\nimport { create } from '../proxy';\n\nimport { isEnabled } from '../enabled';\n\nconst objectMerge = (options, ...sources) => {\n  let target = {};\n\n  if (isEnabled()) {\n    if (!options) {\n      options = {\n        info: getTargetInfo(sources.find((item) => hasTargetInfo(item))),\n        deep: false,\n      };\n    }\n\n    target = create(target, options);\n  }\n\n  return Object.assign(target, ...sources);\n};\n\nexport default objectMerge;\n"],"names":["RETURN_VALUE","buildPath","sequence","reduce","str","name","String","parseInt","test","action","types","type","errorReporter","storedType","PrimitiveTypeChecker","target","cachedTypes","this","collectTypesOnInit","keys","forEach","key","getTypeString","value","undefined","Array","source","names","sourceTypes","hasOwnProperty","sourceType","targetType","checkType","newValue","thisArg","args","length","valid","index","defaultTypeChecker","getDefaultTypeChecker","constructErrorString","required","actual","actualTypeString","ConsoleErrorReporter","getErrorReporter","enabled","isEnabled","INFO_KEY","Symbol","getTargetInfo","setTargetInfo","info","hasTargetInfo","createChildrenCache","children","storeChildInfo","cache","childInfo","storeChildInfoFrom","child","getChildInfo","mergeTargetInfo","targetInfo","sourceInfo","deep","checker","config","targetCache","sourceCache","mergeChildrenCache","mergeConfigs","error","TARGET_KEY","validTypes","isValidTarget","isTypeChecked","Boolean","getProperty","setProperty","callFunction","wrapWithProxy","Function","Proxy","createInfoFromOptions","createTargetInfo","init","create","options","createFn","property","getTargetProperty","Error","setNonTargetProperty","proxyConfig","wrapSetPropertyValues","setTargetProperty","argumentsList","arguments","wrapFunctionArguments","getTargetArguments","result","apply","returnValue","wrapFunctionReturnValues","getTargetReturnValue","deepInitializer","typeChecker","requiredTypeString","console","warn","reporter","sources","find","item","Object","assign","newConfig"],"mappings":"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"}