{"version":3,"file":"type-checkers.min.js","sources":["../source/checkers/utils.js","../source/checkers/primitive.js","../source/checkers/index.js","../source/reporters/utils.js","../source/reporters/console.js","../source/reporters/index.js","../source/enabled.js","../source/target/info.js","../source/proxy/config.js","../source/target/proxy.js","../source/utils.js","../source/proxy/proxy.js","../source/proxy/getProperty.js","../source/proxy/setProperty.js","../source/proxy/callFunction.js","../source/reporters/error.js","../source/target/object.js"],"sourcesContent":["\nexport const GET_PROPERTY = 'GetProperty';\nexport const SET_PROPERTY = 'SetProperty';\nexport const ARGUMENTS = 'Arguments';\nexport const RETURN_VALUE = 'ReturnValue';\nexport const MERGE = 'Merge';\n\nexport const buildPath = sequence => sequence\n  .reduce((str, name) => {\n    if (String(parseInt(name, 10)) === name) {\n      str = `${str}[${name}]`;\n    } else if (/^[a-z][\\w$]*$/i.test(name)) {\n      str = str ? `${str}.${name}` : name;\n    } else {\n      str = `${str}[\"${name}\"]`;\n    }\n\n    return str;\n  }, '');\n","import {\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  MERGE,\n  buildPath,\n} from './utils';\n\nconst checkType = (action, types, name, type, errorReporter, sequence) => {\n  if (!type) {\n    return true;\n  }\n\n  const storedType = types[name];\n\n  if (storedType) {\n    // TODO add possibility to store function in types[name] that can be called to identify if there are type error\n    if (storedType !== type) {\n      errorReporter(action, buildPath([...sequence, name]), types[name], type);\n\n      return false;\n    }\n  } else {\n    types[name] = type;\n  }\n\n  return true;\n};\n\nconst PrimitiveTypeChecker = {\n  collectTypesOnInit: true,\n\n  init(target, errorReporter, cachedTypes = null) {\n    let types = {};\n\n    if (cachedTypes) {\n      types = cachedTypes;\n    } else if (this.collectTypesOnInit) {\n      Object.keys(target)\n        .forEach((key) => {\n          types[key] = this.getTypeString(target[key]);\n        });\n    }\n\n    return {\n      types,\n      errorReporter,\n    };\n  },\n\n  getTypeString(value) {\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return 'array';\n    }\n\n    return typeof value;\n  },\n\n  mergeConfigs({ types, errorReporter }, source, names = []) {\n    const sourceTypes = source.types;\n\n    for (const name in sourceTypes) {\n      const sourceType = sourceTypes[name];\n      const targetType = types[name];\n\n      if (sourceType && targetType && targetType !== sourceType) {\n        errorReporter(MERGE, buildPath([...names, name]), targetType, sourceType);\n      } else {\n        types[name] = sourceType;\n      }\n    }\n  },\n\n  getProperty(target, name, value, { types, errorReporter }, sequence) {\n    return checkType(\n      GET_PROPERTY,\n      types,\n      name,\n      this.getTypeString(value),\n      errorReporter,\n      sequence,\n    );\n  },\n\n  setProperty(target, name, newValue, { types, errorReporter }, sequence) {\n    return checkType(\n      SET_PROPERTY,\n      types,\n      name,\n      this.getTypeString(newValue),\n      errorReporter,\n      sequence,\n    );\n  },\n\n  arguments(target, thisArg, args, { types, errorReporter }, sequence) {\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const agrValid = checkType(\n        ARGUMENTS,\n        types,\n        String(index),\n        this.getTypeString(args[index]),\n        errorReporter,\n        sequence,\n      );\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  },\n\n  returnValue(target, thisArg, value, { types, errorReporter }, sequence) {\n    return checkType(\n      RETURN_VALUE,\n      types,\n      '',\n      this.getTypeString(value),\n      errorReporter,\n      sequence,\n    );\n  },\n};\n\nexport default PrimitiveTypeChecker;\n","import PrimitiveTypeChecker from './primitive';\n\nlet defaultTypeChecker = PrimitiveTypeChecker;\n\nexport const getDefaultTypeChecker = () => defaultTypeChecker;\nexport const setDefaultTypeChecker = (typeChecker) => defaultTypeChecker = typeChecker;\n","export const constructErrorString = (action, name, required, actual) =>\n  `${action}Error on \"${name}\" instead of \"${required}\" received \"${actual}\"`;\n","import { constructErrorString } from './utils';\n\nexport const ConsoleErrorReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\nexport const ConsoleWarnReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.warn(constructErrorString(action, name, requiredTypeString, actualTypeString));\n","import { ConsoleErrorReporter } from './console';\n\nlet errorReporter = ConsoleErrorReporter;\n\nexport const getErrorReporter = () => errorReporter;\n\nexport const setErrorReporter = (reporter) => errorReporter = reporter;\n","let enabled = true;\n\nexport const isEnabled = () => enabled;\nexport const setEnabled = (value = true) => enabled = !!value;\n","export const INFO_KEY = Symbol('type-checkers::info');\n\nexport const createTargetInfo = (checker, config, deep = true, names = [], children = createChildrenCache()) => ({\n  checker,\n  config,\n  deep,\n  names,\n  children,\n});\n\nexport const getTargetInfo = (target) => {\n  return target ? target[INFO_KEY] : undefined;\n};\n\nexport const setTargetInfo = (target, info) => {\n  if (target && info) {\n    target[INFO_KEY] = info;\n  }\n};\n\nexport const hasTargetInfo = (target) => !!getTargetInfo(target);\n\nexport const getTargetTypeChecker = (target) => {\n  return target && target[INFO_KEY] ? target[INFO_KEY].checker : undefined;\n};\n\nexport const getTargetTypeCheckerConfig = (target) => {\n  return target && target[INFO_KEY] ? target[INFO_KEY].config : undefined;\n};\n\nexport const createChildrenCache = (children = {}) => ({ ...children });\n\nexport const mergeChildrenCache = (targetCache, sourceCache) => {\n  for (const name in sourceCache) {\n    if (targetCache.hasOwnProperty(name)) {\n      targetCache[name] = mergeTargetInfo(targetCache[name], sourceCache[name]);\n    } else {\n      targetCache[name] = sourceCache[name];\n    }\n  }\n\n  return targetCache;\n};\n\nexport const storeChildInfo = (cache, name, childInfo) => {\n  delete cache[name];\n\n  if (childInfo) {\n    cache[name] = childInfo;\n  }\n};\n\nexport const storeChildInfoFrom = (cache, name, child) => {\n  storeChildInfo(cache, name, getTargetInfo(child));\n};\n\nexport const getChildInfo = (cache, name) => cache[name];\n\nexport const removeChildInfo = (cache, name) => delete cache[name];\n\nexport const mergeTargetInfo = (targetInfo, sourceInfo) => {\n  const { deep, checker, children, config, names } = targetInfo;\n\n  if (checker === sourceInfo.checker) {\n    targetInfo.deep = deep || sourceInfo.deep;\n    targetInfo.children = mergeChildrenCache(children, sourceInfo.children);\n    targetInfo.config = checker.mergeConfigs(config, sourceInfo.config, names);\n  } else {\n    console.error('TypeChecked objects can be merged only if using exactly same instance of type checker.');\n  }\n\n  return targetInfo;\n};\n","export const config = {\n  wrapFunctionReturnValues: true,\n  wrapFunctionArguments: false,\n  wrapSetPropertyValues: true,\n};\n\nexport const setProxyConfig = (newConfig) => Object.assign(config, newConfig);\n\nexport const getProxyConfig = () => ({ ...config });\n","export const TARGET_KEY = Symbol('type-checkers::target');\n\nexport const getOriginalTarget = (target) => {\n  return target[TARGET_KEY] || target;\n};","import { TARGET_KEY } from './target/proxy';\n\nconst validTypes = {\n  object: true,\n  function: true,\n};\n\nexport const isValidTarget = (target) => target && validTypes[typeof target];\nexport const isTypeChecked = (target) => Boolean(target && target[TARGET_KEY]);","import { getDefaultTypeChecker } from '../checkers';\nimport { getErrorReporter } from '../reporters';\nimport { isEnabled } from '../enabled';\nimport {\n  createTargetInfo,\n  setTargetInfo,\n  createChildrenCache,\n} from '../target/info';\nimport { isValidTarget, isTypeChecked } from '../utils';\nimport getPropertyInit from './getProperty';\nimport setPropertyInit from './setProperty';\nimport callFunctionInit from './callFunction';\n\nlet getProperty;\nlet setProperty;\nlet callFunction;\n\nconst objectProxy = (target) => new Proxy(\n  target,\n  {\n    get: getProperty,\n    set: setProperty,\n  },\n);\n\nconst functionProxy = (target) => new Proxy(\n  target,\n  {\n    apply: callFunction,\n    construct: callFunction,\n  },\n);\n\nexport const wrapWithProxy = (target) => {\n  if (target instanceof Function) {\n    return functionProxy(target);\n  }\n\n  return objectProxy(target);\n};\n\nexport const create = (\n  target,\n  {\n    deep = true,\n    names = [],\n    config = null,\n    children = null,\n    checker = getDefaultTypeChecker(),\n    info = null, // exclusive option, if set other options being ignored\n  } = {},\n) => {\n  if (!isValidTarget(target) || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  setTargetInfo(\n    target,\n    info || createTargetInfo(\n      checker,\n      checker.init(target, getErrorReporter(), config),\n      deep,\n      names,\n      createChildrenCache(children),\n    ),\n  );\n\n  return wrapWithProxy(target);\n};\ngetProperty = getPropertyInit(create);\nsetProperty = setPropertyInit(create);\ncallFunction = callFunctionInit(create);\n\nconst deepInitializer = (obj) => {\n for(const name in obj) {\n   const value = obj[name];\n\n   if(typeof value === 'object') {\n    deepInitializer(value);\n   }\n }\n};\n\n// FIXME initialize info without creating proxies and create proxy only for root object\n// will skip functions/methods since we get info about them only when being executed\nexport const createDeep = (target, options) => {\n  if (!target || target !== 'object' || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  const typeChecked = create(\n    target,\n    {\n      ...options,\n      deep: true,\n    },\n  );\n\n  deepInitializer(typeChecked);\n\n  return typeChecked;\n};\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst getTargetProperty = (createFn, target, property, value) => {\n  const info = getTargetInfo(target);\n  const { deep, children, names, checker } = info;\n\n  if (deep || value instanceof Function) {\n    const childInfo = getChildInfo(children, property);\n\n    if (childInfo) {\n      value = createFn(value, { info: childInfo });\n    } else {\n      value = createFn(value, { deep, names: [...names, property], checker });\n      storeChildInfoFrom(children, property, value);\n    }\n  }\n\n  return value;\n};\n\nconst getProperty = (createFn) => (target, property) => {\n  const value = target[property];\n\n  if (property === INFO_KEY) {\n    return value;\n    /*\n    target[TARGET_KEY] is a virtual property accessing which indicates\n    if object is wrapped with type checked proxy or not.\n    */\n  } else if (property === TARGET_KEY) {\n    return target;\n  }\n\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.getProperty) {\n    checker.getProperty(target, property, value, config, names);\n  }\n\n  if (!isValidTarget(value) || isTypeChecked(value)) {\n    return value;\n  }\n\n  return getTargetProperty(createFn, target, property, value);\n};\n\nexport default getProperty;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n  mergeTargetInfo,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { config as proxyConfig } from './config';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst setNonTargetProperty = (target, property, value) => {\n  if (property === INFO_KEY) {\n    let info = getTargetInfo(target);\n    if (info && value && info !== value) {\n      info = mergeTargetInfo(info, value);\n    } else {\n      info = value;\n    }\n\n    target[property] = info;\n    return true;\n  } else if (!isValidTarget(value)) {\n    target[property] = value;\n    return true;\n  }\n\n  return false;\n};\n\nconst setTargetProperty = (createFn, target, property, value) => {\n  if (proxyConfig.wrapSetPropertyValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(value)) {\n      const childInfo = getChildInfo(children, property);\n\n      if (childInfo) {\n        value = createFn(value, { info: childInfo });\n      } else {\n        value = createFn(value, { deep, names: [...names, property], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, property, value);\n  }\n\n  target[property] = value;\n  return true;\n}\n\nconst setProperty = (createFn) => (target, property, value) => {\n  if (property === TARGET_KEY) {\n    throw new Error(`\"${TARGET_KEY}\" is a virtual property and cannot be set`);\n  }\n\n  const { names, config, checker } = getTargetInfo(target);\n\n  if (checker.setProperty) {\n    checker.setProperty(target, property, value, config, names);\n  }\n\n  return setNonTargetProperty(target, property, value)\n    || setTargetProperty(createFn, target, property, value);\n};\n\nexport default setProperty;\n","import {\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { config as proxyConfig } from './config';\nimport { isTypeChecked } from '../utils';\nimport { RETURN_VALUE } from '../checkers/utils';\n\nconst getTargetArguments = (createFn, target, argumentsList) => {\n  if (proxyConfig.wrapFunctionArguments) {\n    const { deep, names, checker } = getTargetInfo(target);\n    const { length } = argumentsList;\n    // FIXME cache arguments info objects as children\n    for (let index = 0; index < length; index++) {\n      argumentsList[index] = createFn(argumentsList[index], { deep, names: [...names, index], checker });\n    }\n  }\n\n  return argumentsList;\n};\nconst getTargetReturnValue = (createFn, target, returnValue) => {\n  if (proxyConfig.wrapFunctionReturnValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(returnValue)) {\n      const childInfo = getChildInfo(children, RETURN_VALUE);\n\n      if (childInfo) {\n        returnValue = createFn(returnValue, { info: childInfo });\n      } else {\n        returnValue = createFn(returnValue, { deep, names: [...names], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, RETURN_VALUE, returnValue);\n  }\n\n  return returnValue;\n};\n\nconst callFunction = (createFn) => (target, thisArg, argumentsList) => {\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.arguments) {\n    checker.arguments(target, thisArg, argumentsList, config, names);\n  }\n\n  argumentsList = getTargetArguments(createFn, target, argumentsList);\n\n  const result = target.apply(thisArg, argumentsList);\n\n  if (checker.returnValue) {\n    checker.returnValue(target, thisArg, result, config, names);\n  }\n\n  return getTargetReturnValue(createFn, target, result);\n};\n\nexport default callFunction;\n","import { constructErrorString } from './utils';\n\nexport const ThrowErrorReporter = (action, name, requiredTypeString, actualTypeString) => {\n  throw new Error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n};\n","import {\n  getTargetInfo,\n  mergeTargetInfo,\n  setTargetInfo,\n  hasTargetInfo,\n} from './info';\n\nimport { create } from '../proxy';\n\nimport { isEnabled } from '../enabled';\n\nexport const objectMerge = (options, ...sources) => {\n  let target = {};\n\n  if (isEnabled()) {\n    if (!options) {\n      options = {\n        info: getTargetInfo(sources.find((item) => hasTargetInfo(item))),\n        deep: false,\n      };\n    }\n\n    target = create(target, options);\n  }\n\n  return Object.assign(target, ...sources);\n};"],"names":["RETURN_VALUE","buildPath","sequence","reduce","str","name","String","parseInt","test","action","types","type","errorReporter","storedType","defaultTypeChecker","target","cachedTypes","this","collectTypesOnInit","keys","forEach","key","getTypeString","value","undefined","Array","source","names","sourceTypes","sourceType","targetType","checkType","newValue","thisArg","args","length","valid","index","getDefaultTypeChecker","constructErrorString","required","actual","actualTypeString","ConsoleErrorReporter","getErrorReporter","enabled","isEnabled","INFO_KEY","Symbol","getTargetInfo","setTargetInfo","info","hasTargetInfo","createChildrenCache","children","storeChildInfoFrom","cache","child","childInfo","getChildInfo","mergeTargetInfo","targetInfo","sourceInfo","deep","checker","config","targetCache","sourceCache","hasOwnProperty","mergeChildrenCache","mergeConfigs","error","TARGET_KEY","validTypes","isValidTarget","isTypeChecked","Boolean","getProperty","setProperty","callFunction","wrapWithProxy","Function","Proxy","create","createTargetInfo","init","createFn","property","getTargetProperty","Error","setNonTargetProperty","proxyConfig","wrapSetPropertyValues","setTargetProperty","argumentsList","arguments","wrapFunctionArguments","getTargetArguments","result","apply","returnValue","wrapFunctionReturnValues","getTargetReturnValue","deepInitializer","obj","typeChecker","requiredTypeString","console","warn","reporter","options","sources","find","item","Object","assign","newConfig","typeChecked"],"mappings":"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"}