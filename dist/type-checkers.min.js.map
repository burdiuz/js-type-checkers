{"version":3,"file":"type-checkers.min.js","sources":["../source/checkers/utils.js","../source/target/info.js","../source/checkers/primitive.js","../source/checkers/index.js","../source/reporters/utils.js","../source/reporters/console.js","../source/reporters/index.js","../source/enabled.js","../source/proxy/config.js","../source/target/proxy.js","../source/utils.js","../source/proxy/create.js","../source/proxy/getProperty.js","../source/proxy/setProperty.js","../source/proxy/callFunction.js","../source/proxy/createDeep.js","../source/reporters/error.js","../source/target/objectMerge.js"],"sourcesContent":["\nexport const GET_PROPERTY = 'GetProperty';\nexport const SET_PROPERTY = 'SetProperty';\nexport const INDEX = 'Index';\nexport const ARGUMENTS = 'Arguments';\nexport const RETURN_VALUE = 'ReturnValue';\nexport const MERGE = 'Merge';\n\nexport const buildPath = (sequence) => sequence\n  .reduce((str, name) => {\n    if (String(parseInt(name, 10)) === name) {\n      str = `${str}[${name}]`;\n    } else if (/^[a-z][\\w$]*$/i.test(name)) {\n      str = str ? `${str}.${name}` : name;\n    } else {\n      str = `${str}[\"${name}\"]`;\n    }\n\n    return str;\n  }, '');\n","export const INFO_KEY = Symbol('type-checkers::info');\n\nexport const createTargetInfo = (\n  checker,\n  config,\n  deep = true,\n  names = [],\n  children = createChildrenCache(),\n) => ({\n  checker,\n  config,\n  deep,\n  names,\n  children,\n});\n\nexport const getTargetInfo = (target) => (target ? target[INFO_KEY] : undefined);\n\nexport const setTargetInfo = (target, info) => {\n  if (target && info) {\n    target[INFO_KEY] = info;\n  }\n};\n\nexport const hasTargetInfo = (target) => !!getTargetInfo(target);\n\nexport const getTargetTypeChecker = (target) =>\n  (target && target[INFO_KEY] ? target[INFO_KEY].checker : undefined);\n\nexport const getTargetTypeCheckerConfig = (target) =>\n  (target && target[INFO_KEY] ? target[INFO_KEY].config : undefined);\n\nexport const createChildrenCache = (children = {}) => ({ ...children });\n\nexport const mergeChildrenCache = (targetCache, sourceCache) => {\n  for (const name in sourceCache) {\n    if (targetCache.hasOwnProperty(name)) {\n      targetCache[name] = mergeTargetInfo(targetCache[name], sourceCache[name]);\n    } else {\n      targetCache[name] = sourceCache[name];\n    }\n  }\n\n  return targetCache;\n};\n\nexport const storeChildInfo = (cache, name, childInfo) => {\n  delete cache[name];\n\n  if (childInfo) {\n    cache[name] = childInfo;\n  }\n};\n\nexport const storeChildInfoFrom = (cache, name, child) => {\n  storeChildInfo(cache, name, getTargetInfo(child));\n};\n\nexport const getChildInfo = (cache, name) => cache[name];\n\nexport const hasChildInfo = (cache, name) => !!cache[name];\n\nexport const removeChildInfo = (cache, name) => delete cache[name];\n\nexport const mergeTargetInfo = (targetInfo, sourceInfo) => {\n  const { deep, checker, children, config, names } = targetInfo;\n\n  if (checker === sourceInfo.checker) {\n    targetInfo.deep = deep || sourceInfo.deep;\n    targetInfo.children = mergeChildrenCache(children, sourceInfo.children);\n    targetInfo.config = checker.mergeConfigs(config, sourceInfo.config, names);\n  } else {\n    console.error('TypeChecked objects can be merged only if using exactly same instance of type checker.');\n  }\n\n  return targetInfo;\n};\n","import {\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  INDEX,\n  MERGE,\n  buildPath,\n} from './utils';\n\nimport { getTargetTypeCheckerConfig } from '../target/info';\n\nconst checkPrimitiveType = (action, types, name, type, errorReporter, sequence) => {\n  if (!type) {\n    return true;\n  }\n\n  const storedType = types[name];\n\n  if (storedType) {\n    if (storedType !== type) {\n      errorReporter(action, buildPath([...sequence, name]), storedType, type);\n\n      return false;\n    }\n  } else {\n    types[name] = type;\n  }\n\n  return true;\n};\n\nconst indexBasedClasses = [Array];\n\nexport const isIndexAccessTarget = (target) =>\n  (target && indexBasedClasses.indexOf(target.constructor) >= 0);\n\nexport const getTypeString = (value) => {\n  if (value === undefined) {\n    return '';\n  } else if (value instanceof Array) {\n    return 'array';\n  }\n\n  return typeof value;\n};\n\nexport const mergeConfigs = ({ types, errorReporter }, source, names = []) => {\n  const sourceTypes = source.types;\n\n  for (const name in sourceTypes) {\n    if (sourceTypes.hasOwnProperty(name)) {\n      const sourceType = sourceTypes[name];\n      const targetType = types[name];\n\n      if (sourceType && targetType && targetType !== sourceType) {\n        errorReporter(MERGE, buildPath([...names, name]), targetType, sourceType);\n      } else {\n        types[name] = sourceType;\n      }\n    }\n  }\n};\n\nexport const replacePropertyTypeCheck = (target, name, typeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[name];\n\n  if (typeCheckFn) {\n    types[name] = typeCheckFn;\n  }\n};\n\nexport const replaceArgumentsTypeCheck = (target, name, argumentsTypeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[ARGUMENTS];\n\n  if (argumentsTypeCheckFn) {\n    types[name] = argumentsTypeCheckFn;\n  }\n};\n\nexport const replaceReturnValueTypeCheck = (target, name, returnValueTypeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[RETURN_VALUE];\n\n  if (returnValueTypeCheckFn) {\n    types[RETURN_VALUE] = returnValueTypeCheckFn;\n  }\n};\n\nexport const registerIndexBasedClass = (constructor) => {\n  indexBasedClasses.push(constructor);\n};\n\nexport const setIndexValueTypeBy = (target, value) => {\n  const config = getTargetTypeCheckerConfig(target);\n  if (config) {\n    config.types[INDEX] = getTypeString(value);\n  }\n};\n\nexport const replaceIndexedTypeCheck = (target, typeCheckFn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[INDEX];\n\n  if (typeCheckFn) {\n    types[INDEX] = typeCheckFn;\n  }\n};\n\nconst PrimitiveTypeChecker = {\n  collectTypesOnInit: true,\n  areArrayElementsOfSameType: true,\n\n  init(target, errorReporter, cachedTypes = null) {\n    let types = {};\n\n    if (cachedTypes) {\n      types = cachedTypes;\n    } else if (this.collectTypesOnInit) {\n      Object.keys(target)\n        .forEach((key) => {\n          types[key] = getTypeString(target[key]);\n        });\n    }\n\n    return {\n      types,\n      errorReporter,\n    };\n  },\n\n  getProperty(target, name, value, config, sequence) {\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\n      return this.getIndexProperty(target, name, value, config, sequence);\n    }\n\n    return this.getNamedProperty(target, name, value, config, sequence);\n  },\n\n  getIndexProperty(target, name, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(GET_PROPERTY, target, name, value, config, sequence);\n    }\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(GET_PROPERTY, types, INDEX, type, errorReporter, sequence);\n  },\n\n  getNamedProperty(target, name, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(GET_PROPERTY, target, name, value, config, sequence);\n    }\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(GET_PROPERTY, types, name, type, errorReporter, sequence);\n  },\n\n  setProperty(target, name, newValue, config, sequence) {\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\n      return this.setIndexProperty(target, name, newValue, config, sequence);\n    }\n\n    return this.setNamedProperty(target, name, newValue, config, sequence);\n  },\n\n  setIndexProperty(target, name, newValue, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(SET_PROPERTY, target, name, newValue, config, sequence);\n    }\n\n    const type = getTypeString(newValue);\n\n    return checkPrimitiveType(SET_PROPERTY, types, INDEX, type, errorReporter, sequence);\n  },\n\n  setNamedProperty(target, name, newValue, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(SET_PROPERTY, target, name, newValue, config, sequence);\n    }\n\n    const type = getTypeString(newValue);\n\n    return checkPrimitiveType(SET_PROPERTY, types, name, type, errorReporter, sequence);\n  },\n\n  arguments(target, thisArg, args, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[ARGUMENTS];\n\n    if (typeFn instanceof Function) {\n      return typeFn(ARGUMENTS, target, args, config, sequence);\n    }\n\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = getTypeString(args[index]);\n      const agrValid = checkPrimitiveType(ARGUMENTS, types, String(index), type, errorReporter, sequence);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  },\n\n  returnValue(target, thisArg, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[RETURN_VALUE];\n\n    if (typeFn instanceof Function) {\n      return typeFn(ARGUMENTS, target, value, config, sequence);\n    }\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(RETURN_VALUE, types, RETURN_VALUE, type, errorReporter, sequence);\n  },\n\n  isIndexAccessTarget,\n  getTypeString,\n  mergeConfigs,\n  replacePropertyTypeCheck,\n  replaceArgumentsTypeCheck,\n  replaceReturnValueTypeCheck,\n  registerIndexBasedClass,\n  setIndexValueTypeBy,\n  replaceIndexedTypeCheck,\n};\n\nexport default PrimitiveTypeChecker;\n","import PrimitiveTypeChecker from './primitive';\n\nlet defaultTypeChecker = PrimitiveTypeChecker;\n\nexport const getDefaultTypeChecker = () => defaultTypeChecker;\nexport const setDefaultTypeChecker = (typeChecker) => {\n  defaultTypeChecker = typeChecker;\n};\n","export const constructErrorString = (action, name, required, actual) =>\n  `${action}Error on \"${name}\" instead of \"${required}\" received \"${actual}\"`;\n","import { constructErrorString } from './utils';\n\nexport const ConsoleErrorReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\nexport const ConsoleWarnReporter = (action, name, requiredTypeString, actualTypeString) =>\n  console.warn(constructErrorString(action, name, requiredTypeString, actualTypeString));\n","import { ConsoleErrorReporter } from './console';\n\nlet errorReporter = ConsoleErrorReporter;\n\nexport const getErrorReporter = () => errorReporter;\n\nexport const setErrorReporter = (reporter) => errorReporter = reporter;\n","let enabled = true;\n\nexport const isEnabled = () => enabled;\nexport const setEnabled = (value = true) => enabled = !!value;\n","export const config = {\n  wrapFunctionReturnValues: true,\n  wrapFunctionArguments: false,\n  wrapSetPropertyValues: true,\n};\n\nexport const setProxyConfig = (newConfig) => Object.assign(config, newConfig);\n\nexport const getProxyConfig = () => ({ ...config });\n","export const TARGET_KEY = Symbol('type-checkers::target');\n\nexport const getOriginalTarget = (target) => {\n  return target[TARGET_KEY] || target;\n};\n","import { TARGET_KEY } from './target/proxy';\n\nconst validTypes = {\n  object: true,\n  function: true,\n};\n\nexport const isValidTarget = (target) => target && validTypes[typeof target];\nexport const isTypeChecked = (target) => Boolean(target && target[TARGET_KEY]);","import { getDefaultTypeChecker } from '../checkers';\nimport { getErrorReporter } from '../reporters';\nimport { isEnabled } from '../enabled';\nimport {\n  createTargetInfo,\n  setTargetInfo,\n  createChildrenCache,\n} from '../target/info';\nimport { isValidTarget, isTypeChecked } from '../utils';\nimport getPropertyInit from './getProperty';\nimport setPropertyInit from './setProperty';\nimport callFunctionInit from './callFunction';\n\nlet getProperty;\nlet setProperty;\nlet callFunction;\n\nconst objectProxy = (target) => new Proxy(\n  target,\n  {\n    get: getProperty,\n    set: setProperty,\n  },\n);\n\nconst functionProxy = (target) => new Proxy(\n  target,\n  {\n    apply: callFunction,\n    construct: callFunction,\n  },\n);\n\nexport const wrapWithProxy = (target) => {\n  if (target instanceof Function) {\n    return functionProxy(target);\n  }\n\n  return objectProxy(target);\n};\n\nexport const createInfoFromOptions = (target, {\n  deep = true,\n  names = [],\n  config = null,\n  children = null,\n  checker = getDefaultTypeChecker(),\n  info = null, // exclusive option, if set other options being ignored\n} = {}) => info || createTargetInfo(\n  checker,\n  checker.init(target, getErrorReporter(), config),\n  deep,\n  names,\n  createChildrenCache(children),\n);\n\nconst create = (target, options) => {\n  if (!isValidTarget(target) || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  setTargetInfo(\n    target,\n    createInfoFromOptions(target, options),\n  );\n\n  return wrapWithProxy(target);\n};\n\ngetProperty = getPropertyInit(create);\nsetProperty = setPropertyInit(create);\ncallFunction = callFunctionInit(create);\n\nexport default create;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst getTargetProperty = (createFn, target, property, value) => {\n  const info = getTargetInfo(target);\n  const { deep, children, names, checker } = info;\n\n  if (deep || value instanceof Function) {\n    const childInfo = getChildInfo(children, property);\n\n    if (childInfo) {\n      value = createFn(value, { info: childInfo });\n    } else {\n      value = createFn(value, { deep, names: [...names, property], checker });\n      storeChildInfoFrom(children, property, value);\n    }\n  }\n\n  return value;\n};\n\nconst getProperty = (createFn) => (target, property) => {\n  const value = target[property];\n\n  if (property === INFO_KEY) {\n    return value;\n    /*\n    target[TARGET_KEY] is a virtual property accessing which indicates\n    if object is wrapped with type checked proxy or not.\n    */\n  } else if (property === TARGET_KEY) {\n    return target;\n  }\n\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.getProperty) {\n    checker.getProperty(target, property, value, config, names);\n  }\n\n  if (!isValidTarget(value) || isTypeChecked(value)) {\n    return value;\n  }\n\n  return getTargetProperty(createFn, target, property, value);\n};\n\nexport default getProperty;\n","import {\n  INFO_KEY,\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n  mergeTargetInfo,\n} from '../target/info';\nimport { TARGET_KEY } from '../target/proxy';\nimport { config as proxyConfig } from './config';\nimport { isValidTarget, isTypeChecked } from '../utils';\n\nconst setNonTargetProperty = (target, property, value) => {\n  if (property === INFO_KEY) {\n    let info = getTargetInfo(target);\n    if (info && value && info !== value) {\n      info = mergeTargetInfo(info, value);\n    } else {\n      info = value;\n    }\n\n    target[property] = info;\n    return true;\n  } else if (!isValidTarget(value)) {\n    target[property] = value;\n    return true;\n  }\n\n  return false;\n};\n\nconst setTargetProperty = (createFn, target, property, value) => {\n  if (proxyConfig.wrapSetPropertyValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(value)) {\n      const childInfo = getChildInfo(children, property);\n\n      if (childInfo) {\n        value = createFn(value, { info: childInfo });\n      } else {\n        value = createFn(value, { deep, names: [...names, property], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, property, value);\n  }\n\n  target[property] = value;\n  return true;\n};\n\nconst setProperty = (createFn) => (target, property, value) => {\n  if (property === TARGET_KEY) {\n    throw new Error(`\"${TARGET_KEY}\" is a virtual property and cannot be set`);\n  }\n\n  const { names, config, checker } = getTargetInfo(target);\n\n  if (checker.setProperty) {\n    checker.setProperty(target, property, value, config, names);\n  }\n\n  return setNonTargetProperty(target, property, value)\n    || setTargetProperty(createFn, target, property, value);\n};\n\nexport default setProperty;\n","import {\n  getTargetInfo,\n  getChildInfo,\n  storeChildInfoFrom,\n} from '../target/info';\nimport { config as proxyConfig } from './config';\nimport { isTypeChecked } from '../utils';\nimport { RETURN_VALUE } from '../checkers/utils';\n\nconst getTargetArguments = (createFn, target, argumentsList) => {\n  if (proxyConfig.wrapFunctionArguments) {\n    const { deep, names, checker } = getTargetInfo(target);\n    const { length } = argumentsList;\n    // FIXME cache arguments info objects as children\n    for (let index = 0; index < length; index++) {\n      argumentsList[index] = createFn(\n        argumentsList[index],\n        {\n          deep,\n          names: [...names, index],\n          checker,\n        },\n      );\n    }\n  }\n\n  return argumentsList;\n};\nconst getTargetReturnValue = (createFn, target, returnValue) => {\n  if (proxyConfig.wrapFunctionReturnValues) {\n    const { deep, names, checker, children } = getTargetInfo(target);\n\n    if (!isTypeChecked(returnValue)) {\n      const childInfo = getChildInfo(children, RETURN_VALUE);\n\n      if (childInfo) {\n        returnValue = createFn(returnValue, { info: childInfo });\n      } else {\n        returnValue = createFn(returnValue, { deep, names: [...names], checker });\n      }\n    }\n\n    storeChildInfoFrom(children, RETURN_VALUE, returnValue);\n  }\n\n  return returnValue;\n};\n\nconst callFunction = (createFn) => (target, thisArg, argumentsList) => {\n  const info = getTargetInfo(target);\n  const { names, config, checker } = info;\n\n  if (checker.arguments) {\n    checker.arguments(target, thisArg, argumentsList, config, names);\n  }\n\n  argumentsList = getTargetArguments(createFn, target, argumentsList);\n\n  const result = target.apply(thisArg, argumentsList);\n\n  if (checker.returnValue) {\n    checker.returnValue(target, thisArg, result, config, names);\n  }\n\n  return getTargetReturnValue(createFn, target, result);\n};\n\nexport default callFunction;\n","import { isEnabled } from '../enabled';\nimport {\n  setTargetInfo,\n  storeChildInfo,\n  getChildInfo,\n} from '../target/info';\nimport { isTypeChecked } from '../utils';\nimport { wrapWithProxy, createInfoFromOptions } from './create';\n\nconst deepInitializer = (target, options) => {\n  const info = createInfoFromOptions(target, options);\n  const { deep, names, checker, config, children } = info;\n\n  Object.keys(target)\n    .forEach((name) => {\n      const value = target[name];\n\n      checker.getProperty(target, name, value, config, names);\n\n      // skip functions/methods since we get info about them only when being executed\n      if (typeof value === 'object') {\n        let childInfo = getChildInfo(children, name);\n\n        if (childInfo) {\n          deepInitializer(value, { info: childInfo });\n        } else {\n          childInfo = deepInitializer(value, { deep, names: [...names, name], checker });\n          storeChildInfo(children, name, childInfo);\n        }\n      }\n    });\n\n  setTargetInfo(target, info);\n\n  return info;\n};\n\nconst createDeep = (target, options) => {\n  if (!target || typeof target !== 'object' || !isEnabled() || isTypeChecked(target)) {\n    return target;\n  }\n\n  deepInitializer(target, options);\n\n  return wrapWithProxy(target);\n};\n\nexport default createDeep;\n","import { constructErrorString } from './utils';\n\nexport const ThrowErrorReporter = (action, name, requiredTypeString, actualTypeString) => {\n  throw new Error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n};\n","import {\n  getTargetInfo,\n  hasTargetInfo,\n} from './info';\n\nimport { create } from '../proxy';\n\nimport { isEnabled } from '../enabled';\n\nconst objectMerge = (options, ...sources) => {\n  let target = {};\n\n  if (isEnabled()) {\n    if (!options) {\n      options = {\n        info: getTargetInfo(sources.find((item) => hasTargetInfo(item))),\n        deep: false,\n      };\n    }\n\n    target = create(target, options);\n  }\n\n  return Object.assign(target, ...sources);\n};\n\nexport default objectMerge;\n"],"names":["GET_PROPERTY","SET_PROPERTY","INDEX","ARGUMENTS","RETURN_VALUE","buildPath","sequence","reduce","str","name","String","parseInt","test","Symbol","getTargetInfo","target","INFO_KEY","undefined","setTargetInfo","info","hasTargetInfo","getTargetTypeCheckerConfig","config","createChildrenCache","children","storeChildInfo","cache","childInfo","storeChildInfoFrom","child","getChildInfo","mergeTargetInfo","targetInfo","sourceInfo","deep","checker","names","targetCache","sourceCache","hasOwnProperty","mergeChildrenCache","mergeConfigs","error","checkPrimitiveType","action","types","type","errorReporter","storedType","indexBasedClasses","Array","isIndexAccessTarget","indexOf","constructor","getTypeString","value","PrimitiveTypeChecker","cachedTypes","this","collectTypesOnInit","keys","forEach","key","areArrayElementsOfSameType","getIndexProperty","getNamedProperty","typeFn","Function","newValue","setIndexProperty","setNamedProperty","thisArg","args","length","valid","index","source","sourceTypes","sourceType","targetType","typeCheckFn","argumentsTypeCheckFn","returnValueTypeCheckFn","push","defaultTypeChecker","getDefaultTypeChecker","constructErrorString","required","actual","actualTypeString","ConsoleErrorReporter","getErrorReporter","enabled","isEnabled","TARGET_KEY","validTypes","isValidTarget","isTypeChecked","Boolean","getProperty","setProperty","callFunction","wrapWithProxy","Proxy","createInfoFromOptions","createTargetInfo","init","create","options","createFn","property","getTargetProperty","Error","setNonTargetProperty","proxyConfig","wrapSetPropertyValues","setTargetProperty","argumentsList","arguments","wrapFunctionArguments","getTargetArguments","result","apply","returnValue","wrapFunctionReturnValues","getTargetReturnValue","deepInitializer","typeChecker","requiredTypeString","console","warn","reporter","sources","find","item","Object","assign","newConfig"],"mappings":"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"}