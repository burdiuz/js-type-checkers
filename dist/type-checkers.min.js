!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(e.TypeCheckers={})}(this,function(e){"use strict";const r="GetProperty",t="SetProperty",n="Index",o="Arguments",c="ReturnValue",s=e=>e.reduce((e,r)=>e=String(parseInt(r,10))===r?`${e}[${r}]`:/^[a-z][\w$]*$/i.test(r)?e?`${e}.${r}`:r:`${e}["${r}"]`,""),i=Symbol("type-checkers::info"),p=e=>e?e[i]:void 0,a=(e,r)=>{e&&r&&(e[i]=r)},u=e=>!!p(e),f=e=>e&&e[i]?e[i].config:void 0,y=(e={})=>Object.assign({},e),l=(e,r,t)=>{delete e[r],t&&(e[r]=t)},d=(e,r,t)=>{l(e,r,p(t))},g=(e,r)=>e[r],h=(e,r)=>{const{deep:t,checker:n,children:o,config:c,names:s}=e;return n===r.checker?(e.deep=t||r.deep,e.children=((e,r)=>{for(const t in r)e.hasOwnProperty(t)?e[t]=h(e[t],r[t]):e[t]=r[t];return e})(o,r.children),e.config=n.mergeConfigs(c,r.config,s)):console.error("TypeChecked objects can be merged only if using exactly same instance of type checker."),e},m=(e,r,t,n,o,c)=>{if(!n)return!0;const i=r[t];if(i){if(i!==n)return o(e,s([...c,t]),i,n),!1}else r[t]=n;return!0},k=[Array],P=e=>e&&k.indexOf(e.constructor)>=0,T=e=>void 0===e?"":e instanceof Array?"array":typeof e,C={collectTypesOnInit:!0,areArrayElementsOfSameType:!0,init(e,r,t=null){let n={};return t?n=t:this.collectTypesOnInit&&Object.keys(e).forEach(r=>{n[r]=T(e[r])}),{types:n,errorReporter:r}},getProperty(e,r,t,n,o){return this.areArrayElementsOfSameType&&P(e)?this.getIndexProperty(e,r,t,n,o):this.getNamedProperty(e,r,t,n,o)},getIndexProperty(e,t,o,c,s){const{types:i,errorReporter:p}=c,a=i[t];if(a instanceof Function)return a(r,e,t,o,c,s);const u=T(o);return m(r,i,n,u,p,s)},getNamedProperty(e,t,n,o,c){const{types:s,errorReporter:i}=o,p=s[t];if(p instanceof Function)return p(r,e,t,n,o,c);const a=T(n);return m(r,s,t,a,i,c)},setProperty(e,r,t,n,o){return this.areArrayElementsOfSameType&&P(e)?this.setIndexProperty(e,r,t,n,o):this.setNamedProperty(e,r,t,n,o)},setIndexProperty(e,r,o,c,s){const{types:i,errorReporter:p}=c,a=i[r];if(a instanceof Function)return a(t,e,r,o,c,s);const u=T(o);return m(t,i,n,u,p,s)},setNamedProperty(e,r,n,o,c){const{types:s,errorReporter:i}=o,p=s[r];if(p instanceof Function)return p(t,e,r,n,o,c);const a=T(n);return m(t,s,r,a,i,c)},arguments(e,r,t,n,c){const{types:s,errorReporter:i}=n,p=s[o];if(p instanceof Function)return p(o,e,t,n,c);const{length:a}=t;let u=!0;for(let e=0;e<a;e++){const r=T(t[e]);u=m(o,s,String(e),r,i,c)&&u}return u},returnValue(e,r,t,n,s){const{types:i,errorReporter:p}=n,a=i[c];if(a instanceof Function)return a(o,e,t,n,s);const u=T(t);return m(c,i,c,u,p,s)},isIndexAccessTarget:P,getTypeString:T,mergeConfigs:({types:e,errorReporter:r},t,n=[])=>{const o=t.types;for(const t in o)if(o.hasOwnProperty(t)){const c=o[t],i=e[t];c&&i&&i!==c?r("Merge",s([...n,t]),i,c):e[t]=c}},replacePropertyTypeCheck:(e,r,t)=>{const{types:n}=f(e);delete n[r],t&&(n[r]=t)},replaceArgumentsTypeCheck:(e,r,t)=>{const{types:n}=f(e);delete n[o],t&&(n[r]=t)},replaceReturnValueTypeCheck:(e,r,t)=>{const{types:n}=f(e);delete n[c],t&&(n[c]=t)},registerIndexBasedClass:e=>{k.push(e)},setIndexValueTypeBy:(e,r)=>{const t=f(e);t&&(t.types[n]=T(r))},replaceIndexedTypeCheck:(e,r)=>{const{types:t}=f(e);delete t[n],r&&(t[n]=r)}};let b=C;const x=()=>b,w=(e,r,t,n)=>`${e}Error on "${r}" instead of "${t}" received "${n}"`,R=(e,r,t,n)=>console.error(w(e,r,t,n));let I=R;const O=()=>I;let E=!0;const j=()=>E,$={wrapFunctionReturnValues:!0,wrapFunctionArguments:!1,wrapSetPropertyValues:!0},F=Symbol("type-checkers::target"),v={object:!0,function:!0},S=e=>e&&v[typeof e],V=e=>Boolean(e&&e[F]);let A,N,B;const D=e=>e instanceof Function?new Proxy(e,{apply:B,construct:B}):new Proxy(e,{get:A,set:N});const M=(e,{deep:r=!0,names:t=[],config:n=null,children:o=null,checker:c=x(),info:s=null}={})=>s||((e,r,t=!0,n=[],o=y())=>({checker:e,config:r,deep:t,names:n,children:o}))(c,c.init(e,O(),n),r,t,y(o)),_=(e,r)=>S(e)&&j()&&!V(e)?(a(e,M(e,r)),D(e)):e;z=_,A=((e,r)=>{const t=e[r];if(r===i)return t;if(r===F)return e;const n=p(e),{names:o,config:c,checker:s}=n;return s.getProperty&&s.getProperty(e,r,t,c,o),!S(t)||V(t)?t:((e,r,t,n)=>{const o=p(r),{deep:c,children:s,names:i,checker:a}=o;if(c||n instanceof Function){const r=g(s,t);r?n=e(n,{info:r}):(n=e(n,{deep:c,names:[...i,t],checker:a}),d(s,t,n))}return n})(z,e,r,t)});var z;G=_,N=((e,r,t)=>{if(r===F)throw new Error(`"${F}" is a virtual property and cannot be set`);const{names:n,config:o,checker:c}=p(e);return c.setProperty&&c.setProperty(e,r,t,o,n),((e,r,t)=>{if(r===i){let n=p(e);return n=n&&t&&n!==t?h(n,t):t,e[r]=n,!0}return!S(t)&&(e[r]=t,!0)})(e,r,t)||((e,r,t,n)=>{if($.wrapSetPropertyValues){const{deep:o,names:c,checker:s,children:i}=p(r);if(!V(n)){const r=g(i,t);n=e(n,r?{info:r}:{deep:o,names:[...c,t],checker:s})}d(i,t,n)}return r[t]=n,!0})(G,e,r,t)});var G;W=_,B=((e,r,t)=>{const n=p(e),{names:o,config:s,checker:i}=n;i.arguments&&i.arguments(e,r,t,s,o),t=((e,r,t)=>{if($.wrapFunctionArguments){const{deep:n,names:o,checker:c}=p(r),{length:s}=t;for(let r=0;r<s;r++)t[r]=e(t[r],{deep:n,names:[...o,r],checker:c})}return t})(W,e,t);const a=e.apply(r,t);return i.returnValue&&i.returnValue(e,r,a,s,o),((e,r,t)=>{if($.wrapFunctionReturnValues){const{deep:n,names:o,checker:s,children:i}=p(r);if(!V(t)){const r=g(i,c);t=e(t,r?{info:r}:{deep:n,names:[...o],checker:s})}d(i,c,t)}return t})(W,e,a)});var W;const q=(e,r)=>{const t=M(e,r),{deep:n,names:o,checker:c,config:s,children:i}=t;return Object.keys(e).forEach(r=>{const t=e[r];if(c.getProperty(e,r,t,s,o),"object"==typeof t){let e=g(i,r);e?q(t,{info:e}):(e=q(t,{deep:n,names:[...o,r],checker:c}),l(i,r,e))}}),a(e,t),t};e.PrimitiveTypeChecker=C,e.getDefaultTypeChecker=x,e.setDefaultTypeChecker=(e=>{b=e}),e.ConsoleErrorReporter=R,e.ConsoleWarnReporter=((e,r,t,n)=>console.warn(w(e,r,t,n))),e.ThrowErrorReporter=((e,r,t,n)=>{throw new Error(w(e,r,t,n))}),e.getErrorReporter=O,e.setErrorReporter=(e=>I=e),e.isEnabled=j,e.setEnabled=((e=!0)=>E=!!e),e.getTargetInfo=p,e.hasTargetInfo=u,e.setTargetInfo=a,e.getTargetTypeChecker=(e=>e&&e[i]?e[i].checker:void 0),e.getTargetTypeCheckerConfig=f,e.mergeTargetInfo=h,e.objectMerge=((e,...r)=>{let t={};return j()&&(e||(e={info:p(r.find(e=>u(e))),deep:!1}),t=_(t,e)),Object.assign(t,...r)}),e.getProxyConfig=(()=>Object.assign({},$)),e.setProxyConfig=(e=>Object.assign($,e)),e.create=_,e.createDeep=((e,r)=>e&&"object"==typeof e&&j()&&!V(e)?(q(e,r),D(e)):e),e.isTypeChecked=V,e.isValidTarget=S,e.default=_,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=type-checkers.min.js.map
