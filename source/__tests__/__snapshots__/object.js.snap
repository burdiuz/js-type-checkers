// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Object When accessing types information When writing types information should contain collection with primitive types 1`] = `
Object {
  "checker": Object {
    "areArrayElementsOfSameType": true,
    "arguments": [Function],
    "collectTypesOnInit": true,
    "getIndexProperty": [Function],
    "getNamedProperty": [Function],
    "getProperty": [Function],
    "getTypeString": [Function],
    "ignorePrototypeValues": true,
    "init": [Function],
    "isIndexAccessTarget": [Function],
    "mergeConfigs": [Function],
    "registerIndexBasedClass": [Function],
    "replaceArgumentsTypeCheck": [Function],
    "replaceIndexedTypeCheck": [Function],
    "replacePropertyTypeCheck": [Function],
    "replaceReturnValueTypeCheck": [Function],
    "returnValue": [Function],
    "setIndexProperty": [Function],
    "setIndexValueType": [Function],
    "setIndexValueTypeBy": [Function],
    "setNamedProperty": [Function],
    "setProperty": [Function],
  },
  "children": Object {
    "arrayValue": Object {
      "checker": Object {
        "areArrayElementsOfSameType": true,
        "arguments": [Function],
        "collectTypesOnInit": true,
        "getIndexProperty": [Function],
        "getNamedProperty": [Function],
        "getProperty": [Function],
        "getTypeString": [Function],
        "ignorePrototypeValues": true,
        "init": [Function],
        "isIndexAccessTarget": [Function],
        "mergeConfigs": [Function],
        "registerIndexBasedClass": [Function],
        "replaceArgumentsTypeCheck": [Function],
        "replaceIndexedTypeCheck": [Function],
        "replacePropertyTypeCheck": [Function],
        "replaceReturnValueTypeCheck": [Function],
        "returnValue": [Function],
        "setIndexProperty": [Function],
        "setIndexValueType": [Function],
        "setIndexValueTypeBy": [Function],
        "setNamedProperty": [Function],
        "setProperty": [Function],
      },
      "children": Object {},
      "config": Object {
        "errorReporter": [MockFunction],
        "types": Object {
          "(Index)": "number",
        },
      },
      "deep": true,
      "names": Array [
        "arrayValue",
      ],
    },
    "objectValue": Object {
      "checker": Object {
        "areArrayElementsOfSameType": true,
        "arguments": [Function],
        "collectTypesOnInit": true,
        "getIndexProperty": [Function],
        "getNamedProperty": [Function],
        "getProperty": [Function],
        "getTypeString": [Function],
        "ignorePrototypeValues": true,
        "init": [Function],
        "isIndexAccessTarget": [Function],
        "mergeConfigs": [Function],
        "registerIndexBasedClass": [Function],
        "replaceArgumentsTypeCheck": [Function],
        "replaceIndexedTypeCheck": [Function],
        "replacePropertyTypeCheck": [Function],
        "replaceReturnValueTypeCheck": [Function],
        "returnValue": [Function],
        "setIndexProperty": [Function],
        "setIndexValueType": [Function],
        "setIndexValueTypeBy": [Function],
        "setNamedProperty": [Function],
        "setProperty": [Function],
      },
      "children": Object {},
      "config": Object {
        "errorReporter": [MockFunction],
        "types": Object {
          "val1": "number",
          "val2": "string",
          "val3": "boolean",
        },
      },
      "deep": true,
      "names": Array [
        "objectValue",
      ],
    },
  },
  "config": Object {
    "errorReporter": [MockFunction],
    "types": Object {
      "arrayValue": "array",
      "booleanValue": "boolean",
      "numberValue": "number",
      "objectValue": "object",
      "stringValue": "string",
    },
  },
  "deep": true,
  "names": Array [],
}
`;

exports[`Object When accessing types information should contain collection with primitive types 1`] = `
Object {
  "checker": Object {
    "areArrayElementsOfSameType": true,
    "arguments": [Function],
    "collectTypesOnInit": true,
    "getIndexProperty": [Function],
    "getNamedProperty": [Function],
    "getProperty": [Function],
    "getTypeString": [Function],
    "ignorePrototypeValues": true,
    "init": [Function],
    "isIndexAccessTarget": [Function],
    "mergeConfigs": [Function],
    "registerIndexBasedClass": [Function],
    "replaceArgumentsTypeCheck": [Function],
    "replaceIndexedTypeCheck": [Function],
    "replacePropertyTypeCheck": [Function],
    "replaceReturnValueTypeCheck": [Function],
    "returnValue": [Function],
    "setIndexProperty": [Function],
    "setIndexValueType": [Function],
    "setIndexValueTypeBy": [Function],
    "setNamedProperty": [Function],
    "setProperty": [Function],
  },
  "children": Object {},
  "config": Object {
    "errorReporter": [MockFunction],
    "types": Object {
      "numberValue": "number",
      "stringValue": "string",
    },
  },
  "deep": true,
  "names": Array [],
}
`;
